program = { statement } ;

statement = variable_declaration
          | function_declaration
          | block
          | if_statement
          | while_statement
          | return_statement
          | break_statement
          | continue_statement
          | expression_statement ;

variable_declaration = "let" identifier ":" type "=" expression ";" ;

function_declaration = "function" identifier "(" [ parameter_list ] ")" ":" type block ;

parameter_list = parameter { "," parameter } ;
parameter = identifier ":" type ;

type = "number_type"
     | "string_type"
     | "boolean_type"
     | "void_type" ;

block = "{" { statement } "}" ;

if_statement = "if" "(" expression ")" statement [ "else" statement ] ;

while_statement = "while" "(" expression ")" statement ;

return_statement = "return" [ expression ] ";" ;

break_statement = "break" ";" ;

continue_statement = "continue" ";" ;

expression_statement = expression ";" ;

expression = assignment ;

assignment = identifier "=" assignment
           | additive;

additive = multiplicative { ( "+" | "-" ) multiplicative } ;

multiplicative = primary { ( "*" | "/" ) primary } ;

primary = "(" expression ")"
        | identifier
        | function_call
        | number_literal
        | string_literal
        | boolean_literal
        | null_literal
        | undefined_literal ;

function_call = identifier "(" [argument_list] ")"
argument_list = expression { "," expression };

identifier = /[a-zA-Z_][a-zA-Z0-9_]*/ ;
number_literal = /\d+(\.\d+)?/ ;
string_literal = /"([^"\\]|\\.)*"/ ;
boolean_literal = /true|false/ ;
null_literal = /null/ ;
undefined_literal = /undefined/ ;
